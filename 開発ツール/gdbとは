* GDBとは [#d8fc6138]
GDBはGNUソフトウェア・システムで動く標準のデバッガです。
C言語、C++言語、Fortran等の各言語にて対応しています。


* 参考URL [#zcc61fb4]
- gdb を用いたデバッグ方法
-- http://uguisu.skr.jp/Windows/gdb.html
- Manpage of GDB
-- http://www.linux.or.jp/JM/html/GNU_gdb/man1/gdb.1.html
- ファイヤープロジェクト
-- http://www.fireproject.jp/feature/gdb/
- Debugging with GDB
-- http://www.asahi-net.or.jp/~wg5k-ickw/html/online/gdb-5.0/gdb-ja_toc.html


#########################################################################
サンプルプログラムで使ってみる
#########################################################################
*** 使ってみよう [#ya63294c]
まず、GDB用にバイナリファイルを作成する必要があります。

以下のサンプルプログラムを保存してください。
	 #include 
	 
	 int main()
	 {
	     int i=0, n=0, fact=1;
	     printf("1からnまでの積を求めます。nの値: ");
	     scanf("%d", &n);
	     for (i = 1; i<=n; i++) {
	         fact = fact * n;
	     }
	     printf("積は%dです。\n", fact);
	     return 0;
	 }

続いて、gccに-gオプションを付加してa.outを作成しましょう。

以下に上記に対してgdbを使用したときのログを示します。
	 [test@kaeru c]$ gdb a.out
	 GNU gdb Red Hat Linux (5.3post-0.20021129.18rh)
	 Copyright 2003 Free Software Foundation, Inc.
	 GDB is free software, covered by the GNU General Public License, and you are
	 welcome to change it and/or distribute copies of it under certain conditions.
	 Type "show copying" to see the conditions.
	 There is absolutely no warranty for GDB.  Type "show warranty" for details.
	 This GDB was configured as "i386-redhat-linux-gnu"...
	 (gdb) run
	 Starting program: /home/tsuyoshi/prog/c/a.out
	 1からnまでの積を求めます。nの値: 3
	 積は27です。
	 
	 Program exited normally.
	 (gdb) run
	 Starting program: /home/tsuyoshi/prog/c/a.out
	 1からnまでの積を求めます。nの値: 4
	 積は256です。
	 
	 Program exited normally.
	 (gdb) b main
	 Breakpoint 1 at 0x804836c: file third.c, line 5.
	 (gdb) run
	 Starting program: /home/tsuyoshi/prog/c/a.out  
	 
	 Breakpoint 1, main () at third.c:5
	 warning: Source file is more recent than executable. 
	 
	 5           int i=0, n=0, fact=1;
	 (gdb) p i
	 $1 = 1073827872
	 (gdb) p n
	 $2 = 1108551892
	 (gdb) p fact
	 $3 = 134513646
	 (gdb) n
	 7           scanf("%d", &n);
	 (gdb) p i
	 $4 = 0
	 (gdb) p n
	 $5 = 0
	 (gdb) p fact
	 $6 = 1
	 (gdb) n
	 8           for (i = 1; i<=n; i++) {
	 (gdb) n
	 1からnまでの積を求めます。nの値: 3
	 10          }
	 (gdb) n
	 11          printf("積は%dです。\n", fact);
	 (gdb) p fact
	 $7 = 1
	 (gdb) n
	 10          }
	 (gdb) n
	 11          printf("積は%dです。\n", fact);
	 (gdb) n
	 10          }
	 (gdb) n
	 11          printf("積は%dです。\n", fact);
	 (gdb) n
	 10          }
	 (gdb) n
	 14
	 (gdb) n
	 積は27です。
	 Line number 16 out of range; third.c has 14 lines.
	 (gdb) h
	 List of classes of commands:
	 
	 aliases -- Aliases of other commands
	 breakpoints -- Making program stop at certain points
	 data -- Examining data
	 files -- Specifying and examining files
	 internals -- Maintenance commands
	 obscure -- Obscure features
	 running -- Running the program
	 stack -- Examining the stack
	 status -- Status inquiries
	 support -- Support facilities
	 tracepoints -- Tracing of program execution without stopping the program
	 user-defined -- User-defined commands
	 
	 Type "help" followed by a class name for a list of commands in that class.
	 Type "help" followed by command name for full documentation.
	 Command name abbreviations are allowed if unambiguous.



#########################################################################
GDB TIPS
#########################################################################

*** gdb基本オプション [#m2377ddd]
	 コマンド	省略形	効果
	 run		デバッグ対象プログラムを実行する
	 backtrace	bt	バックトレースを表示する
	 frame N	f	フレームNに移動する
	 list	l	現在の関数のソースコードを表示する
	 print EXPR	p	式EXPRの値を表示する
	 continue	c	続きを実行する
	 quit	q	gdbを終了する

- 参考
-- http://typea.info/tips/wiki.cgi?page=Linux+C+gdb%A4%CB%A4%E8%A4%EB%A5%C7%A5%D0%A5%C3%A5%B0
-- http://b-rabbit-alice.blogspot.com/2011/05/gdb-pre.html

*** coreファイルが何処に作成されるか(FreeBSD) [#a6f711d5]
	 $　sysctl -a | grep core
 でわかるらしい

*** gcoreコマンドにより、現在動作中のcoreファイルを取得することができる。 [#f4d811f1]
gcore(get core images of running process)により取得を行う
psコマンドで現在動作中のPIDを確認して、取得したいPIDをgcoreの引数に指定する。
	 $ sudo gcore 
これにより、カレントディレクトリ内にcore.という名前のファイルが存在
しているので、あとは
	 $ gdb <プログラム名前> core.<pid>
により、debugすればよい。

- 参考
-- http://d.hatena.ne.jp/sarface2012/20101027

*** coreファイルを解析する [#gbacf0b6]
この場合の利用方法は以下の様にする。
	 $ gdb <該当プログラム>   

例えば、apacheプログラムでapache.core.65534というコアファイルだったとすると。
以下の様に指定しなければならない(パスは適当にしました)
	 $ gdb /usr/local/bin/httpd  /usr/local/crash/apache.core.65534

*** gdbでapacheのrequest_rec構造体の内容を表示したい [#wa5f0742]
以下のURLが参考になります。
http://d.hatena.ne.jp/yone098/20090518/1242703019

	 (gdb) p *r
と入力すると、内容が出力されます(但し、整形された出力でない)

整形された出力にしたい場合には、set print pretty onを実行してから、同様にp *rを
入力します。
	 (gdb) set print pretty on
	 (gdb) p *r

*** ブレークポイントから残り部分を実行する [#v9108c2b]
	 (gdb) c

*** バックトレースを表示する [#c3072c7f]
	 (gdb) bt                  // バックトレース概要を表示
	 (gdb) bt full             // バックトレース詳細を表示

*** 読み込んでいる共有ライブラリを表示する [#j7f94b1b]
	 (gdb) sharedlibrary       // run等実行後に実行します。

