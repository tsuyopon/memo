XV6ソースコードを読む上で不明な点などをまとめておく

	http://itpro.nikkeibp.co.jp/article/COLUMN/20080501/300463/

###############################
コンソール関連操作
	http://d.hatena.ne.jp/wocota/20090131/1233384375
###############################

--------------------------------
*** out, inアセンブラ命令について️
--------------------------------
デバイスの操作には，I/Oメモリ空間をI/Oポートを使って読み書きする。
C言語にはI/Oポートを操作する命令が無いため，アセンブラを使用する。アセンブラには次の二つの命令が用意されている：
	
    out アドレス, データ
        指定したアドレスにデータを書き込む(デバイスへ送る)。
    in データ，アドレス
        指定したアドレスのデータを読む(デバイスから受け取る)。

--------------------------------
*** ️Linuxにおけるoutbとinbについて
--------------------------------
Linux における入出力命令を使った入出力は、inb() と outb() で行われる。

outb(unsigned char value, int port)
  ポート番号 port に 1 バイトの value を出力する

unsigned char inb(int port)
  ポート番号 port から 1 バイトの value を入力してその値を返す

 1 バイト 8 ビットではなくて 2 バイト 16 ビット 単位のもの (inw(), outw()) や4 バイト 32 ビット単位のもの( inl(), outl() ) もある。


 参考: http://www.coins.tsukuba.ac.jp/~yas/coins/os2-2010/2011-02-01/

--------------------------------
*** ️インラインアセンブラについて
--------------------------------
GCCのインラインアセンブラ機能を使うことによってC言語の中にアセンブラを埋め込みC言語とアセンブラ間のデータのやり取りを簡単に記述することができるようになる。
具体的にはI/0ポートへ1byteのデータを送付する関数outbはインラインアセンブラを用いて以下のように記述する。
	
	void outb(unsigned short port, unsigned char val) {
		  __asm__ __volatile__ ("out dx, al" : : "d" (port), "a" (val));
	}

--------------------------------
*** ️ビデオコントローラーの操作について
--------------------------------
ビデオコントローラーのアドレス(正確には今回使うのはCRTコントローラーのアドレス)は0x3D4，0x3D5なので，このアドレスを指定すればいい。
カーソルを移動する関数は次のように書ける：

void set_cur(unsigned short cur_pos) {
  outb(0x3D4, 15);
  outb(0x3D5, cur_pos);
  outb(0x3D4, 14);
  outb(0x3D5, cur_pos >> 8);
}


カーソルの位置は画面上の文字数に対応していて，一番左上に移動したい場合は0，一番右下に移動したい場合は25*80=2000を指定すればいい。
カーソル位置をビデオコントローラーに伝えるには，このデバイスは一度に１バイトのデータしかやり取りできないので，二回に分けでカーソル位置を伝える。
outb(0x3D4, 15)でカーソル位置の下位１バイトを送ることを伝え，
outb(0x3D5, cur_pos)でカーソル位置のデータの下位１バイトを送り，
そのあとoutb(0x3D4, 14)で上位１バイトを送ることを伝え
同様に残りのデータを送ることで，カーソルの位置を変更できる。


--------------------------------
*** ️PICについて
--------------------------------
Programmable Interrupt Controllerは割り込みコントローラーと呼ばれるものです。
つまり、デバイスからの割り込み信号を受け取り、プロセッサに伝える働きがあります。
もっともよく知られているPICの一つに、8259Aがある。これはx86アーキテクチャのPCに採用されている。今では、これはx86 PCの中で単独のチップとしては存在しておらず、機能はマザーボードのサウスブリッジの一部として取り込まれている。


8259PICについては以下に図が載っている。
	http://www.valinux.co.jp/technologylibrary/document/linux/interrupts0001/

MASTER PICがIRQ0〜IRQ7、SLAVE PICがIRQ8〜IQR15となっていて、どの番号が何に割り当てられるのかは決定しています。

	
--------------------------------
*** ️サウスブリッジとノースブリッジ復習
--------------------------------
CPUに近い側がノースブリッジ、CPUから遠くノースブリッジを介して接続されるICがサウスブリッジと呼ばれる。	



