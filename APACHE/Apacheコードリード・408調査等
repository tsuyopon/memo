
##########################################################################
*** 408がどの時点で発生するのか調査する
##########################################################################
$ grep -rinH 408 ./*  | grep -i define
./include/httpd.h:515:#define HTTP_REQUEST_TIME_OUT              408
./srclib/apr-util/test/testreslist.c:102:#define PERCENT95th 4080218931u

$ grep -rinH HTTP_REQUEST_TIME_OUT ./*
./docs/conf/extra/httpd-multilang-errordoc.conf.in:40:ErrorDocument 408 /error/HTTP_REQUEST_TIME_OUT.html.var
./include/httpd.h:515:#define HTTP_REQUEST_TIME_OUT              408
./include/httpd.h:557:                                    ((x) == HTTP_REQUEST_TIME_OUT)      || \
./modules/http/http_filters.c:392:                    http_error = HTTP_REQUEST_TIME_OUT;
./modules/http/http_filters.c:498:                        http_error = HTTP_REQUEST_TIME_OUT;
./modules/http/http_protocol.c:987:    case HTTP_REQUEST_TIME_OUT:
./server/protocol.c:612:                r->status = HTTP_REQUEST_TIME_OUT;
./server/protocol.c:708:                r->status = HTTP_REQUEST_TIME_OUT;
./server/protocol.c:931:        else if (r->status == HTTP_REQUEST_TIME_OUT) {

ここでステータスコード情報408をセットしているのは以下の２行
./server/protocol.c:612:                r->status = HTTP_REQUEST_TIME_OUT;
./server/protocol.c:708:                r->status = HTTP_REQUEST_TIME_OUT;

両者の実装を見てみるとap_rgetline関数の戻り値に対してハンドリングしていることが確認できる。
引き続き、この実装を見てみる。以下は708行目付近のハンドリング例

 703         rv = ap_rgetline(&field, r->server->limit_req_fieldsize + 2,
 704                          &len, r, 0, bb);
 705 
 706         if (rv != APR_SUCCESS) {
 707             if (APR_STATUS_IS_TIMEUP(rv)) {
 708                 r->status = HTTP_REQUEST_TIME_OUT;
 709             }
 710             else {
 711                 r->status = HTTP_BAD_REQUEST;
 712             }


 408が発生する箇所は特定できた。続いて、上記のap_rgetlineが何者かを調査する。

##########################################################################
 *** ap_rgetlineが何をしているのか?(上記の続き)
 ##########################################################################

ap_rgetlineは以下のような実装になっていて、実際にはap_rgetline_coreが呼ばれている
 441 #if APR_CHARSET_EBCDIC
 442 AP_DECLARE(apr_status_t) ap_rgetline(char **s, apr_size_t n,
 443                                      apr_size_t *read, request_rec *r,
 444                                      int fold, apr_bucket_brigade *bb)
 445 {
 446     /* on ASCII boxes, ap_rgetline is a macro which simply invokes
 447      * ap_rgetline_core with the same parms
 448      *
 449      * on EBCDIC boxes, each complete http protocol input line needs to be
 450      * translated into the code page used by the compiler.  Since
 451      * ap_rgetline_core uses recursion, we do the translation in a wrapper
 452      * function to insure that each input character gets translated only once.
 453      */
 454     apr_status_t rv;
 455 
 456     rv = ap_rgetline_core(s, n, read, r, fold, bb);
 457     if (rv == APR_SUCCESS) {
 458         ap_xlate_proto_from_ascii(*s, *read);
 459     }
 460     return rv;
 461 }
 462 #endif

 なお、include/http_protocol.hには以下の定義もされている
 #if APR_CHARSET_EBCDIC
AP_DECLARE(apr_status_t) ap_rgetline(char **s, apr_size_t n,
                                     apr_size_t *read,
                                     request_rec *r, int fold,
                                     apr_bucket_brigade *bb);
#else /* ASCII box */
#define ap_rgetline(s, n, read, r, fold, bb) \
        ap_rgetline_core((s), (n), (read), (r), (fold), (bb))
#endif


ap_rgetline_coreを読んでみる。
おそらくソケット通信をしている箇所は以下、


 255             rv = apr_bucket_read(e, &str, &len, APR_BLOCK_READ);

apr_bucket_readの定義元を探す
$ grep -rinH apr_bucket_read ./ | grep -ie function -ie define
.//srclib/apr-util/include/apr_buckets.h:103: * Note: all of the above functions have wrapper macros (apr_bucket_read(),
.//srclib/apr-util/include/apr_buckets.h:1009: * The apr_bucket_read function returns a convenient amount of data
.//srclib/apr-util/include/apr_buckets.h:1029: * apr_bucket_read function will read a convenient amount of data
.//srclib/apr-util/include/apr_buckets.h:1073:#define apr_bucket_read(e,str,len,block) (e)->type->read(e, str, len, block)
.//srclib/apr-util/include/apr_buckets.h:1163:/* There is no apr_bucket_read_notimpl, because it is a required function

srclib/apr-util/include/apr_buckets.hを覗いてみる
struct apr_bucket {
    /** Links to the rest of the brigade */
    APR_RING_ENTRY(apr_bucket) link;
    /** The type of bucket.  */
    const apr_bucket_type_t *type;
    (以下略)


apr_buckets.hをさらに見てみると関数ポインタにて定義されているようだ
 131 struct apr_bucket_type_t {
     (中略)
 166     /**
 167      * Read the data from the bucket. This is required to be implemented
 168      *  for all bucket types.
 169      * @param b The bucket to read from
 170      * @param str A place to store the data read.  Allocation should only be
 171      *            done if absolutely necessary. 
 172      * @param len The amount of data read.
 173      * @param block Should this read function block if there is more data that
 174      *              cannot be read immediately.
 175      */
 176     apr_status_t (*read)(apr_bucket *b, const char **str, apr_size_t *len,
 177                          apr_read_type_e block);


上記関数ポインタで呼び出される関数は以下のファイルの構造体の３番目の配列にて名称が定義されているようだ。
これらすべてのファイルで実装されている。
$ grep -rinH "const apr_bucket_type_t " ./*  | grep -v "./srclib/apr-util/include/apr_buckets.h" | grep " = {"
./modules/generators/mod_cgi.c:722:static const apr_bucket_type_t bucket_type_cgi = {
./modules/proxy/mod_proxy_scgi.c:142:static const apr_bucket_type_t bucket_type_socket_ex = {
./server/eoc_bucket.c:48:AP_DECLARE_DATA const apr_bucket_type_t ap_bucket_type_eoc = {
./server/error_bucket.c:67:AP_DECLARE_DATA const apr_bucket_type_t ap_bucket_type_error = {
./srclib/apr-util/buckets/apr_buckets_eos.c:47:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_eos = {
./srclib/apr-util/buckets/apr_buckets_file.c:221:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_file = {
./srclib/apr-util/buckets/apr_buckets_flush.c:47:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_flush = {
./srclib/apr-util/buckets/apr_buckets_heap.c:89:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_heap = {
./srclib/apr-util/buckets/apr_buckets_mmap.c:135:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_mmap = {
./srclib/apr-util/buckets/apr_buckets_pipe.c:112:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_pipe = {
./srclib/apr-util/buckets/apr_buckets_pool.c:135:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_pool = {
./srclib/apr-util/buckets/apr_buckets_simple.c:121:const apr_bucket_type_t apr_bucket_type_immortal = {
./srclib/apr-util/buckets/apr_buckets_simple.c:130:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_transient = {
./srclib/apr-util/buckets/apr_buckets_socket.c:107:APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_socket = {
./srclib/apr-util/dbd/apr_dbd_mysql.c:118:static const apr_bucket_type_t apr_bucket_type_lob = {
./srclib/apr-util/dbd/apr_dbd_odbc.c:185:static const apr_bucket_type_t odbc_bucket_type = {
./srclib/apr-util/dbd/apr_dbd_oracle.c:223:static const apr_bucket_type_t apr_bucket_type_lob = {


例えば、./srclib/apr-util/buckets/apr_buckets_heap.cの１つだけを抽出してみると以下のように記載されている。
 89 APU_DECLARE_DATA const apr_bucket_type_t apr_bucket_type_heap = {
 90     "HEAP", 5, APR_BUCKET_DATA,
 91     heap_bucket_destroy,
 92     heap_bucket_read,             /* ここが(*read)としての値となる */
 93     apr_bucket_setaside_noop,
 94     apr_bucket_shared_split,
 95     apr_bucket_shared_copy
 96 };

heap_bucket_readが先ほどの関数ポインタで呼び出されるファイル名となり、この関数は以下のように定義されているようだ。
 21 static apr_status_t heap_bucket_read(apr_bucket *b, const char **str,
 22                                      apr_size_t *len, apr_read_type_e block)
 23 {
 24     apr_bucket_heap *h = b->data;
 25 
 26     *str = h->base + b->start;
 27     *len = b->length;
 28     return APR_SUCCESS;
 29 }


ap_rgetlineが何をしているのかを調査するためには、これらのbucketの関係がどのような仕組みになっているかを知る必要がありそうだ。
以下の資料が詳しそうだ。
	http://ohgrkrs-blog.blogspot.jp/2014/11/aprbucket-aprbucketbrigade.html

* 参考URL
- http://ohgrkrs-blog.blogspot.jp/2014/11/aprbucket-aprbucketbrigade.html
- http://www.dzeta.jp/~junjis/code_reading/index.php?Apache%2F%A5%EA%A5%AF%A5%A8%A5%B9%A5%C8%BD%E8%CD%FD%A4%F2%C6%C9%A4%E0#f50be4f4

##############
-　server/protocols.cのread_request_lineメソッドを見てみる
- apr_status_tの型って一体なんなのか?
- r->assbackwardsってなんだ?
- 